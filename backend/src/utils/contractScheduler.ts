import cron from 'node-cron';
import Employee from '../models/Employee';
import Notification from '../models/Notification';

// üëâ ‡∏•‡∏≠‡∏á require ‡πÅ‡∏ö‡∏ö lazy load ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
let io: any;
try {
  io = require('../app').io;
} catch (e) {
  console.warn('‚ö†Ô∏è No io loaded (testing mode)');
}

// ‚úÖ export function ‡πÑ‡∏ß‡πâ‡πÉ‡∏´‡πâ test ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å
export const checkContractStatus = async () => {
  console.log('üìÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô...');

  try {
    const today = new Date();
    const SEVEN_DAYS = 7 * 24 * 60 * 60 * 1000;

    const employees = await Employee.find({ status: 'Active' });

    for (const employee of employees) {
      if (!employee.contract_end_date) continue;

      const timeDiff = new Date(employee.contract_end_date).getTime() - today.getTime();

      if (timeDiff <= SEVEN_DAYS && (!employee.renewal_status || employee.renewal_status === 'None')) {
        employee.renewal_status = 'Pending';
        await employee.save();

        await Notification.create({
          employee_id: "20240001",
          category: 'contract',
          message: '‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
          details: `‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ${employee.first_name} (${employee.employee_id}) ‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤`,
        });

        // ‚úÖ Emit ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î io ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏û‡∏±‡∏á)
        if (io) {
          io.emit('contract_renewal_pending', {
            message: '‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤',
            employee: {
              name: employee.first_name,
              employee_id: employee.employee_id,
              contract_end_date: employee.contract_end_date,
            },
          });
        }

        console.log(`üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${employee.employee_id} ‚Üí Pending`);
      }

      if (timeDiff < 0 && employee.renewal_status !== 'Approved') {
        employee.status = 'Inactive';
        await employee.save();
        console.log(`‚õî ‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${employee.employee_id}`);
      }
    }
  } catch (err) {
    console.error('‚ùå contractScheduler error:', err);
  }
};

cron.schedule('0 0 * * *', checkContractStatus);
