pipeline {
  agent any

  environment {
    VOLUME_NAME = "mongo_data"
    DB_NAME = "mydb"
    LINE_TOKEN = credentials('LINE_NOTIFY_TOKEN') // ‚úÖ ‡πÉ‡∏ä‡πâ Credentials ‡∏Ç‡∏≠‡∏á Jenkins ‡πÅ‡∏ó‡∏ô hardcode
  }

  stages {

    stage('üì• Clone Repository') {
      steps {
        checkout scm
      }
    }

    stage('‚ôªÔ∏è Cleanup Old Containers') {
      steps {
        echo 'üßπ Cleanup container ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà'
        bat 'docker-compose down --remove-orphans || echo "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÄ‡∏Å‡πà‡∏≤"'
      }
    }

    stage('üöÄ Start MongoDB') {
      steps {
        echo 'üöÄ Starting MongoDB container...'
        bat 'docker-compose up -d mongo'
      }
    }

    stage('üî• Restore MongoDB ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
      steps {
        script {
          echo 'üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection Employee ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà...'

          def result = bat(script: '''
            docker exec mongo mongosh --quiet --eval "db.getSiblingDB('mydb').Employee.countDocuments()"
          ''', returnStdout: true).trim()

          if (result == "0") {
            echo '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ restore...'

            dir('dump/mydb') {
              bat '''
                FOR %%f IN (*.bson) DO (
                  SET name=%%~nf
                  echo üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Restore collection %%~nf ...
                  docker cp %%f mongo:/tmp/%%f
                  docker exec mongo mongorestore --db=mydb --collection=%%~nf --drop /tmp/%%f
                )
              '''
            }
            echo '‚úÖ Restore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!'
          } else {
            echo "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (${result} records) ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£ restore ‡πÑ‡∏õ"
          }
        }
      }
    }

    stage('üì¶ Install Dependencies') {
      parallel {
        stage('Frontend') {
          steps {
            dir('frontend') {
              bat 'npm install'
            }
          }
        }
        stage('Dashboard') {
          steps {
            dir('dashboard') {
              bat 'npm install'
            }
          }
        }
        stage('Backend') {
          steps {
            dir('backend') {
              bat 'npm install'
            }
          }
        }
      }
    }

    stage('üîç Lint Code (Frontend + Backend)') {
      parallel {
        stage('Lint Frontend') {
          steps {
            dir('frontend') {
              bat 'npx eslint . || echo "‚ö†Ô∏è ‡∏°‡∏µ Warning ‡∏´‡∏£‡∏∑‡∏≠ Error ‡πÉ‡∏ô Lint"'
            }
          }
        }
        stage('Lint Backend') {
          steps {
            dir('backend') {
              bat 'npx eslint . || echo "‚ö†Ô∏è ‡∏°‡∏µ Warning ‡∏´‡∏£‡∏∑‡∏≠ Error ‡πÉ‡∏ô Lint"'
            }
          }
        }
      }
    }

    stage('üß™ Run Test (Frontend / Dashboard / Backend)') {
      parallel {
        stage('Frontend') {
          steps {
            dir('frontend') {
              bat 'echo "üß™ Frontend test not yet implemented"'
            }
          }
        }
        stage('Dashboard') {
          steps {
            dir('dashboard') {
              bat 'echo "üß™ Dashboard test not yet implemented"'
            }
          }
        }
        stage('Backend') {
          steps {
            dir('backend') {
              bat 'echo "üß™ Backend test not yet implemented"'
            }
          }
        }
      }
    }

    stage('‚öôÔ∏è Prepare .env Files') {
      steps {
        dir('frontend') {
          bat 'copy .env.example .env'
        }
        dir('dashboard') {
          bat 'copy .env.example .env'
        }
        dir('backend') {
          bat 'copy .env.example .env'
        }
      }
    }

    stage('üê≥ Build Docker Images') {
      steps {
        bat 'docker-compose build'
      }
    }

    stage('üöÄ Run Docker Services') {
      steps {
        bat 'docker-compose up -d'
      }
    }

    stage('ü§ñ Run Robot Framework') {
      steps {
        bat '''
          set PATH=C:\\Users\\TigerDev\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
          robot --outputdir results tests\\FrontEndTest.robot
        '''
      }
    }

  } // end stages

  post {
    always {
      echo 'üì¶ Publish Robot Report'
      robot outputPath: 'results'
      bat 'xcopy /Y /S /I results D:\\SPU\\Daily-Contract\\results'

      echo 'üéâ Pipeline Completed!'
    }

    success {
      echo '‚úÖ Build Success!'
      bat '''
        curl -H "Content-Type: application/json" \
          -X POST \
          -d "{\\"content\\": \\"‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Jenkins\\"}" \
        https://discordapp.com/api/webhooks/1360721938003263538/w-d79xvOtQC0gn4PN4N2NYuF-Td9ub2fNvFQPtzuYSuLtDp1iP6x4nyAwgokPkKeXVx8
      '''
    }

    failure {
      echo '‚ùå Build Failed!'
      bat '''
        curl -H "Content-Type: application/json" \
        -X POST \
        -d "{\\"content\\": \\"‚ùå Jenkins Build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πà‡∏ß‡∏ô!\\"}" \
        https://discordapp.com/api/webhooks/1360721938003263538/w-d79xvOtQC0gn4PN4N2NYuF-Td9ub2fNvFQPtzuYSuLtDp1iP6x4nyAwgokPkKeXVx8
      '''
    }
  }
}
