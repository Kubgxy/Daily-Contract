pipeline {
  agent any

  environment {
    VOLUME_NAME = "mongo_data"
    DB_NAME = "mydb"
  }

  stages {

    stage('üì• Clone Repository') {
      steps {
        checkout scm
      }
    }

    stage('‚ôªÔ∏è Cleanup Old Containers') {
      steps {
        echo 'üßπ Cleanup container ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà'
        bat 'docker-compose down --remove-orphans || echo "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÄ‡∏Å‡πà‡∏≤"'
      }
    }

    stage('üöÄ Start MongoDB') {
      steps {
        echo 'üöÄ Starting MongoDB container...'
        bat 'docker-compose up -d mongo'
      }
    }

    stage('üî• Restore MongoDB ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
      steps {
        script {
          echo '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ MongoDB ‡∏û‡∏£‡πâ‡∏≠‡∏°...'

          def ready = false
          for (int i = 0; i < 10; i++) {
            def status = bat(script: '''
              docker exec mongo mongosh --quiet --eval "db.adminCommand('ping')"
            ''', returnStatus: true)

            if (status == 0) {
              ready = true
              echo '‚úÖ MongoDB ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!'
              break
            } else {
              echo "‚ùå MongoDB ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${i + 1})"
              sleep(time: 3, unit: 'SECONDS')
            }
          }

          if (!ready) {
            error('üí• MongoDB ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î')
          }

          echo 'üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection Employee ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà...'
          def result = bat(script: '''
            docker exec mongo mongosh --quiet --eval "db.getSiblingDB('mydb').Employee.countDocuments()"
          ''', returnStdout: true).trim()

          if (result == "0") {
            echo '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ restore...'

            dir('dump/mydb') {
              bat '''
                FOR %%f IN (*.bson) DO (
                  SET name=%%~nf
                  echo üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Restore collection %%~nf ...
                  docker cp %%f mongo:/tmp/%%f
                  docker exec mongo mongorestore --db=mydb --collection=%%~nf --drop /tmp/%%f
                )
              '''
            }
            echo '‚úÖ Restore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!'
          } else {
            echo "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (${result} records) ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£ restore ‡πÑ‡∏õ"
          }
        }
      }
    }

    stage('üîç Lint Code') {
      parallel {
        stage('Frontend Lint') {
          steps {
            dir('frontend') {
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                echo 'üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Lint ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á Frontend'
                bat 'npx eslint src --ext .js,.jsx --config .eslintrc.cjs --no-warn-ignored -f stylish > D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-frontend-report.txt || exit 0'
                bat 'type D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-frontend-report.txt'
              }
            }
          }
        }

        stage('Backend Lint') {
          steps {
            dir('backend') {
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                echo 'üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Lint ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á Backend'
                bat 'npx eslint . -f stylish > D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-backend-report.txt || exit 0'
                bat 'type D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-backend-report.txt'
              }
            }
          }
        }
      }
    }

    stage('‚öôÔ∏è Prepare .env Files') {
      steps {
        dir('backend') {
          bat 'copy .env.example .env'
        }
      }
    }

    stage('üê≥ Build & Run Docker Compose') {
      steps {
        bat 'docker-compose up --build -d'
      }
    }

    stage('ü§ñ Run Robot Framework') {
       steps {
         bat '''
           set PATH=C:\\Users\\TigerDev\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
           if not exist results mkdir results
           robot --outputdir results tests\\FrontEndPST.robot
         '''
      }
    }
  } // end stages

  post {
    always {
      echo 'üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå Robot Framework ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      bat 'xcopy /Y /S /I results D:\\SPU\\Daily-Contract\\tests\\results'

      echo 'üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå eslint log ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      archiveArtifacts artifacts: '**/eslint-*-report.txt', allowEmptyArchive: true
      bat 'type D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-frontend-report.txt'
      bat 'type D:\\SPU\\Daily-Contract\\logs_eslint\\eslint-backend-report.txt'

      script {
        def now = new Date().format("HH:mm:ss")
        def isSuccess = currentBuild.result == null || currentBuild.result == 'SUCCESS'
        def message = isSuccess ? 
          """{ "content": "======================================\\n‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏¢‡πâ‡∏î‡∏µ‡πÉ‡∏à‡∏™‡∏∏‡∏î ‡πÜ üöÄüéâ\\nüì¶ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: Daily-Contract\\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${now}\\n======================================" }""" :
          """{ "content": "======================================\\n‚ùå Build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏£‡∏µ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πà‡∏ß‡∏ô! üî•üß®\\nüì¶ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: Daily-Contract\\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${now}\\n======================================" }"""

        def file = isSuccess ? 'discord_success.json' : 'discord_failure.json'
        writeFile file: file, text: message

        bat """
          curl -X POST -H "Content-Type: application/json" -d @${file} ^
          https://discordapp.com/api/webhooks/1360721938003263538/w-d79xvOtQC0gn4PN4N2NYuF-Td9ub2fNvFQPtzuYSuLtDp1iP6x4nyAwgokPkKeXVx8
        """
      }
    }
  }

} // END pipeline
