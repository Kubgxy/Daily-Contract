pipeline {
  agent any

  environment {
    VOLUME_NAME = "mongo_data"
    DB_NAME = "mydb"
  }

  stages {

    stage('üì• Clone Repository') {
      steps {
        checkout scm
      }
    }

    stage('‚ôªÔ∏è Cleanup Old Containers') {
      steps {
        echo 'üßπ Cleanup container ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà'
        bat 'docker-compose down --remove-orphans || echo "‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÄ‡∏Å‡πà‡∏≤"'
      }
    }

    stage('üöÄ Start MongoDB') {
      steps {
        echo 'üöÄ Starting MongoDB container...'
        bat 'docker-compose up -d mongo'
      }
    }

    stage('üî• Restore MongoDB ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
      steps {
        script {
          echo '‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ MongoDB ‡∏û‡∏£‡πâ‡∏≠‡∏°...'

          // ‚úÖ loop ‡∏£‡∏≠‡∏à‡∏ô Mongo ‡∏û‡∏£‡πâ‡∏≠‡∏°
          def ready = false
          for (int i = 0; i < 10; i++) {
            def status = bat(script: '''
              docker exec mongo mongosh --quiet --eval "db.adminCommand('ping')"
            ''', returnStatus: true)

            if (status == 0) {
              ready = true
              echo '‚úÖ MongoDB ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß!'
              break
            } else {
              echo "‚ùå MongoDB ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏£‡∏≠‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${i + 1})"
              sleep(time: 3, unit: 'SECONDS')
            }
          }

          if (!ready) {
            error('üí• MongoDB ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î')
          }

          echo 'üîé ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ collection Employee ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà...'
          def result = bat(script: '''
            docker exec mongo mongosh --quiet --eval "db.getSiblingDB('mydb').Employee.countDocuments()"
          ''', returnStdout: true).trim()

          if (result == "0") {
            echo '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ restore...'

            dir('dump/mydb') {
              bat '''
                FOR %%f IN (*.bson) DO (
                  SET name=%%~nf
                  echo üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Restore collection %%~nf ...
                  docker cp %%f mongo:/tmp/%%f
                  docker exec mongo mongorestore --db=mydb --collection=%%~nf --drop /tmp/%%f
                )
              '''
            }
            echo '‚úÖ Restore ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!'
          } else {
            echo "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (${result} records) ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£ restore ‡πÑ‡∏õ"
          }
        }
      }
    }

    stage('üì¶ Install Dependencies') {
      parallel {
        stage('Frontend') {
          steps {
            dir('frontend') {
              bat 'npm install'
            }
          }
        }
        stage('Dashboard') {
          steps {
            dir('dashboard') {
              bat 'npm install'
            }
          }
        }
        stage('Backend') {
          steps {
            dir('backend') {
              bat 'npm install'
            }
          }
        }
      }
    }

    stage('üîç Lint Code') {
      parallel {

        stage('Frontend Lint') {
          steps {
            dir('frontend') {
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                echo 'üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Lint ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á Frontend'
                bat 'npx eslint .'
              }
            }
          }
        }

        stage('Backend Lint') {
          steps {
            dir('backend') {
              catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                echo 'üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Lint ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ù‡∏±‡πà‡∏á Backend'
                bat 'npx eslint .'
              }
            }
          }
        }
      }
    }

    stage('üß™ Run Tests') {
      parallel {
        stage('Frontend Test') {
          steps {
            dir('frontend') {
              bat 'echo "üß™ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Frontend test"'
            }
          }
        }
        stage('Dashboard Test') {
          steps {
            dir('dashboard') {
              bat 'echo "üß™ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Dashboard test"'
            }
          }
        }
        stage('Backend Test') {
          steps {
            dir('backend') {
              bat 'echo "üß™ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Backend test"'
            }
          }
        }
      }
    }

    stage('‚öôÔ∏è Prepare .env Files') {
      steps {
        dir('frontend') {
          bat 'copy .env.example .env'
        }
        dir('dashboard') {
          bat 'copy .env.example .env'
        }
        dir('backend') {
          bat 'copy .env.example .env'
        }
      }
    }

    stage('üê≥ Build Docker Images') {
      steps {
        bat 'docker-compose build'
      }
    }

    stage('üöÄ Run Docker Services') {
      steps {
        bat 'docker-compose up -d'
      }
    }

    stage('ü§ñ Run Robot Framework') {
      steps {
        bat '''
          set PATH=C:\\Users\\TigerDev\\AppData\\Local\\Programs\\Python\\Python313\\Scripts;%PATH%
          robot --outputdir results tests\\FrontEndTest.robot
        '''
      }
    }

  } // end stages

post {
  always {
    node('') { // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ label ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô node('master') ‡∏´‡∏£‡∏∑‡∏≠ node('windows')
      echo 'üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Robot Framework'
      robot outputPath: 'results'
      bat 'xcopy /Y /S /I results D:\\SPU\\Daily-Contract\\results'
    }
  }

  success {
    node('') {
      powershell '''
        $message = @{
          content = "‚úÖ Build ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏¢‡πâ‡∏î‡∏µ‡πÉ‡∏à‡∏™‡∏∏‡∏î ‡πÜ üöÄüéâ\\nüì¶ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: Daily-Contract\\nüîÅ ‡πÄ‡∏ß‡∏•‡∏≤: $(Get-Date -Format 'HH:mm:ss')"
        } | ConvertTo-Json -Depth 10
        Invoke-RestMethod -Uri "https://discordapp.com/api/webhooks/1360721938003263538/w-d79xvOtQC0gn4PN4N2NYuF-Td9ub2fNvFQPtzuYSuLtDp1iP6x4nyAwgokPkKeXVx8" -Method Post -Body $message -ContentType "application/json"
      '''
    }
  }

  failure {
    node('') {
      powershell '''
        $message = @{
          content = "‚ùå Build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß - ‡∏£‡∏µ‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πà‡∏ß‡∏ô! üî•\\nüì¶ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: Daily-Contract\\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: $(Get-Date -Format 'HH:mm:ss')"
        } | ConvertTo-Json -Depth 10
        Invoke-RestMethod -Uri "https://discordapp.com/api/webhooks/1360721938003263538/w-d79xvOtQC0gn4PN4N2NYuF-Td9ub2fNvFQPtzuYSuLtDp1iP6x4nyAwgokPkKeXVx8" -Method Post -Body $message -ContentType "application/json"
      '''
    }
  }
}
  
}